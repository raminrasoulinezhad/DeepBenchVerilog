// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_array_array_softmax_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [7:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [7:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [7:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [7:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [7:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [7:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [7:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [7:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [7:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [7:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [7:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [7:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [7:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [7:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [7:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [7:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [7:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [7:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [7:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [17:0] exp_table_q0;
reg   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [17:0] exp_table_q1;
wire   [9:0] invert_table3_address0;
reg    invert_table3_ce0;
wire   [13:0] invert_table3_q0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    data_V_data_0_V0_status;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_23_reg_1148;
reg   [0:0] tmp_24_reg_1153;
reg   [0:0] tmp_25_reg_1158;
reg   [0:0] tmp_26_reg_1163;
reg   [0:0] tmp_27_reg_1168;
reg   [0:0] tmp_28_reg_1173;
reg   [0:0] tmp_29_reg_1178;
reg   [0:0] tmp_30_reg_1183;
reg  signed [17:0] exp_res_0_V_reg_1188;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg  signed [17:0] exp_res_0_V_reg_1188_pp0_iter1_reg;
reg  signed [17:0] exp_res_1_V_reg_1194;
reg  signed [17:0] exp_res_1_V_reg_1194_pp0_iter1_reg;
reg  signed [17:0] exp_res_2_V_reg_1210;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [17:0] exp_res_2_V_reg_1210_pp0_iter1_reg;
reg  signed [17:0] exp_res_3_V_reg_1216;
reg  signed [17:0] exp_res_3_V_reg_1216_pp0_iter1_reg;
reg  signed [17:0] exp_res_4_V_reg_1232;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_sig_ioackin_res_V_data_0_V_TREADY;
reg    ap_block_pp0_stage3_11001;
reg  signed [17:0] exp_res_5_V_reg_1238;
reg  signed [17:0] exp_res_6_V_reg_1254;
reg  signed [17:0] exp_res_7_V_reg_1260;
reg  signed [17:0] exp_res_8_V_reg_1276;
reg  signed [17:0] exp_res_9_V_reg_1281;
reg   [9:0] y_V_reg_1286;
reg   [13:0] inv_exp_sum_V_reg_1296;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire   [63:0] tmp_fu_801_p1;
wire   [63:0] tmp_1_fu_814_p1;
wire   [63:0] tmp_2_fu_883_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_3_fu_887_p1;
wire   [63:0] tmp_4_fu_891_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_5_fu_895_p1;
wire   [63:0] tmp_6_fu_899_p1;
wire   [63:0] tmp_7_fu_903_p1;
wire   [63:0] tmp_s_fu_907_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_8_fu_911_p1;
wire   [63:0] tmp_9_fu_971_p1;
reg    data_V_data_0_V0_update;
wire    ap_block_pp0_stage3_01001;
reg    ap_reg_ioackin_res_V_data_0_V_TREADY;
reg    ap_reg_ioackin_res_V_data_1_V_TREADY;
reg    ap_reg_ioackin_res_V_data_2_V_TREADY;
reg    ap_reg_ioackin_res_V_data_3_V_TREADY;
reg    ap_reg_ioackin_res_V_data_4_V_TREADY;
reg    ap_reg_ioackin_res_V_data_5_V_TREADY;
reg    ap_reg_ioackin_res_V_data_6_V_TREADY;
reg    ap_reg_ioackin_res_V_data_7_V_TREADY;
reg    ap_reg_ioackin_res_V_data_8_V_TREADY;
reg    ap_reg_ioackin_res_V_data_9_V_TREADY;
wire  signed [17:0] p_Val2_s_fu_382_p0;
wire  signed [13:0] p_Val2_s_fu_382_p1;
wire  signed [23:0] OP2_V_cast_fu_975_p1;
wire  signed [17:0] p_Val2_2_fu_383_p0;
wire  signed [13:0] p_Val2_2_fu_383_p1;
wire  signed [17:0] p_Val2_4_fu_384_p0;
wire  signed [13:0] p_Val2_4_fu_384_p1;
wire  signed [17:0] p_Val2_6_fu_385_p0;
wire  signed [13:0] p_Val2_6_fu_385_p1;
wire  signed [17:0] p_Val2_3_fu_386_p0;
wire  signed [13:0] p_Val2_3_fu_386_p1;
wire  signed [17:0] p_Val2_7_fu_387_p0;
wire  signed [13:0] p_Val2_7_fu_387_p1;
wire  signed [17:0] p_Val2_5_fu_388_p0;
wire  signed [13:0] p_Val2_5_fu_388_p1;
wire  signed [17:0] p_Val2_1_fu_389_p0;
wire  signed [13:0] p_Val2_1_fu_389_p1;
wire  signed [17:0] p_Val2_8_fu_390_p0;
wire  signed [13:0] p_Val2_8_fu_390_p1;
wire  signed [17:0] p_Val2_9_fu_391_p0;
wire  signed [13:0] p_Val2_9_fu_391_p1;
wire   [0:0] tmp_21_fu_793_p3;
wire   [0:0] tmp_22_fu_806_p3;
wire  signed [17:0] tmp2_fu_915_p0;
wire  signed [17:0] tmp2_fu_915_p1;
wire   [17:0] tmp4_fu_921_p2;
wire   [17:0] tmp3_fu_925_p2;
wire   [17:0] tmp2_fu_915_p2;
wire   [17:0] tmp8_fu_940_p2;
wire   [17:0] tmp7_fu_944_p2;
wire   [17:0] tmp6_fu_936_p2;
wire   [17:0] tmp5_fu_949_p2;
wire   [17:0] tmp1_fu_930_p2;
wire   [17:0] exp_sum_V_fu_955_p2;
wire   [23:0] p_Val2_s_fu_382_p2;
wire   [23:0] p_Val2_1_fu_389_p2;
wire   [23:0] p_Val2_2_fu_383_p2;
wire   [23:0] p_Val2_3_fu_386_p2;
wire   [23:0] p_Val2_4_fu_384_p2;
wire   [23:0] p_Val2_5_fu_388_p2;
wire   [23:0] p_Val2_6_fu_385_p2;
wire   [23:0] p_Val2_7_fu_387_p2;
wire   [23:0] p_Val2_8_fu_390_p2;
wire   [23:0] p_Val2_9_fu_391_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_res_V_data_0_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_1_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_2_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_3_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_4_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_5_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_6_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_7_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_8_V_TREADY = 1'b0;
#0 ap_reg_ioackin_res_V_data_9_V_TREADY = 1'b0;
end

softmax_latency_array_array_softmax_config5_s_exp_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1)
);

softmax_latency_array_array_softmax_config5_s_invert_table3 #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table3_address0),
    .ce0(invert_table3_ce0),
    .q0(invert_table3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_0_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_0_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_0_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_0_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_1_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_1_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_1_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_1_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_2_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_2_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_2_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_2_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_3_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_3_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_3_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_3_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_4_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_4_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_4_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_4_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_5_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_5_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_5_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_5_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_6_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_6_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_6_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_6_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_7_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_7_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_7_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_7_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_8_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_8_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_8_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_8_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_res_V_data_9_V_TREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_res_V_data_9_V_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (res_V_data_9_V_TREADY == 1'b1))) begin
                ap_reg_ioackin_res_V_data_9_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_0_V_reg_1188 <= exp_table_q0;
        exp_res_1_V_reg_1194 <= exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_0_V_reg_1188_pp0_iter1_reg <= exp_res_0_V_reg_1188;
        exp_res_1_V_reg_1194_pp0_iter1_reg <= exp_res_1_V_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_reg_1210 <= exp_table_q0;
        exp_res_3_V_reg_1216 <= exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_2_V_reg_1210_pp0_iter1_reg <= exp_res_2_V_reg_1210;
        exp_res_3_V_reg_1216_pp0_iter1_reg <= exp_res_3_V_reg_1216;
        inv_exp_sum_V_reg_1296 <= invert_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_4_V_reg_1232 <= exp_table_q0;
        exp_res_5_V_reg_1238 <= exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_6_V_reg_1254 <= exp_table_q0;
        exp_res_7_V_reg_1260 <= exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_8_V_reg_1276 <= exp_table_q0;
        exp_res_9_V_reg_1281 <= exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_23_reg_1148 <= data_V_data_2_V_dout[32'd7];
        tmp_24_reg_1153 <= data_V_data_3_V_dout[32'd7];
        tmp_25_reg_1158 <= data_V_data_4_V_dout[32'd7];
        tmp_26_reg_1163 <= data_V_data_5_V_dout[32'd7];
        tmp_27_reg_1168 <= data_V_data_6_V_dout[32'd7];
        tmp_28_reg_1173 <= data_V_data_7_V_dout[32'd7];
        tmp_29_reg_1178 <= data_V_data_8_V_dout[32'd7];
        tmp_30_reg_1183 <= data_V_data_9_V_dout[32'd7];
        y_V_reg_1286 <= {{exp_sum_V_fu_955_p2[17:8]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_res_V_data_0_V_TREADY == 1'b0)) begin
        ap_sig_ioackin_res_V_data_0_V_TREADY = res_V_data_0_V_TREADY;
    end else begin
        ap_sig_ioackin_res_V_data_0_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V0_update = 1'b1;
    end else begin
        data_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            exp_table_address0 = tmp_s_fu_907_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            exp_table_address0 = tmp_6_fu_899_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            exp_table_address0 = tmp_4_fu_891_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table_address0 = tmp_2_fu_883_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table_address0 = tmp_fu_801_p1;
        end else begin
            exp_table_address0 = 'bx;
        end
    end else begin
        exp_table_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            exp_table_address1 = tmp_8_fu_911_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            exp_table_address1 = tmp_7_fu_903_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            exp_table_address1 = tmp_5_fu_895_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table_address1 = tmp_3_fu_887_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table_address1 = tmp_1_fu_814_p1;
        end else begin
            exp_table_address1 = 'bx;
        end
    end else begin
        exp_table_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        invert_table3_ce0 = 1'b1;
    end else begin
        invert_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_1_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_2_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_3_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_4_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_5_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_6_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_7_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_8_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_res_V_data_9_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_cast_fu_975_p1 = $signed(inv_exp_sum_V_reg_1296);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_V_data_0_V0_status == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_V_data_0_V0_status == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_sig_ioackin_res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_sig_ioackin_res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((data_V_data_0_V0_status == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_V_data_0_V0_status = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign data_V_data_0_V_read = data_V_data_0_V0_update;

assign data_V_data_1_V_read = data_V_data_0_V0_update;

assign data_V_data_2_V_read = data_V_data_0_V0_update;

assign data_V_data_3_V_read = data_V_data_0_V0_update;

assign data_V_data_4_V_read = data_V_data_0_V0_update;

assign data_V_data_5_V_read = data_V_data_0_V0_update;

assign data_V_data_6_V_read = data_V_data_0_V0_update;

assign data_V_data_7_V_read = data_V_data_0_V0_update;

assign data_V_data_8_V_read = data_V_data_0_V0_update;

assign data_V_data_9_V_read = data_V_data_0_V0_update;

assign exp_sum_V_fu_955_p2 = (tmp5_fu_949_p2 + tmp1_fu_930_p2);

assign invert_table3_address0 = tmp_9_fu_971_p1;

assign p_Val2_1_fu_389_p0 = exp_res_1_V_reg_1194_pp0_iter1_reg;

assign p_Val2_1_fu_389_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_1_fu_389_p2 = ($signed(p_Val2_1_fu_389_p0) * $signed(p_Val2_1_fu_389_p1));

assign p_Val2_2_fu_383_p0 = exp_res_2_V_reg_1210_pp0_iter1_reg;

assign p_Val2_2_fu_383_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_2_fu_383_p2 = ($signed(p_Val2_2_fu_383_p0) * $signed(p_Val2_2_fu_383_p1));

assign p_Val2_3_fu_386_p0 = exp_res_3_V_reg_1216_pp0_iter1_reg;

assign p_Val2_3_fu_386_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_3_fu_386_p2 = ($signed(p_Val2_3_fu_386_p0) * $signed(p_Val2_3_fu_386_p1));

assign p_Val2_4_fu_384_p0 = exp_res_4_V_reg_1232;

assign p_Val2_4_fu_384_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_4_fu_384_p2 = ($signed(p_Val2_4_fu_384_p0) * $signed(p_Val2_4_fu_384_p1));

assign p_Val2_5_fu_388_p0 = exp_res_5_V_reg_1238;

assign p_Val2_5_fu_388_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_5_fu_388_p2 = ($signed(p_Val2_5_fu_388_p0) * $signed(p_Val2_5_fu_388_p1));

assign p_Val2_6_fu_385_p0 = exp_res_6_V_reg_1254;

assign p_Val2_6_fu_385_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_6_fu_385_p2 = ($signed(p_Val2_6_fu_385_p0) * $signed(p_Val2_6_fu_385_p1));

assign p_Val2_7_fu_387_p0 = exp_res_7_V_reg_1260;

assign p_Val2_7_fu_387_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_7_fu_387_p2 = ($signed(p_Val2_7_fu_387_p0) * $signed(p_Val2_7_fu_387_p1));

assign p_Val2_8_fu_390_p0 = exp_res_8_V_reg_1276;

assign p_Val2_8_fu_390_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_8_fu_390_p2 = ($signed(p_Val2_8_fu_390_p0) * $signed(p_Val2_8_fu_390_p1));

assign p_Val2_9_fu_391_p0 = exp_res_9_V_reg_1281;

assign p_Val2_9_fu_391_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_9_fu_391_p2 = ($signed(p_Val2_9_fu_391_p0) * $signed(p_Val2_9_fu_391_p1));

assign p_Val2_s_fu_382_p0 = exp_res_0_V_reg_1188_pp0_iter1_reg;

assign p_Val2_s_fu_382_p1 = OP2_V_cast_fu_975_p1;

assign p_Val2_s_fu_382_p2 = ($signed(p_Val2_s_fu_382_p0) * $signed(p_Val2_s_fu_382_p1));

assign res_V_data_0_V_TDATA = {{p_Val2_s_fu_382_p2[23:16]}};

assign res_V_data_1_V_TDATA = {{p_Val2_1_fu_389_p2[23:16]}};

assign res_V_data_2_V_TDATA = {{p_Val2_2_fu_383_p2[23:16]}};

assign res_V_data_3_V_TDATA = {{p_Val2_3_fu_386_p2[23:16]}};

assign res_V_data_4_V_TDATA = {{p_Val2_4_fu_384_p2[23:16]}};

assign res_V_data_5_V_TDATA = {{p_Val2_5_fu_388_p2[23:16]}};

assign res_V_data_6_V_TDATA = {{p_Val2_6_fu_385_p2[23:16]}};

assign res_V_data_7_V_TDATA = {{p_Val2_7_fu_387_p2[23:16]}};

assign res_V_data_8_V_TDATA = {{p_Val2_8_fu_390_p2[23:16]}};

assign res_V_data_9_V_TDATA = {{p_Val2_9_fu_391_p2[23:16]}};

assign tmp1_fu_930_p2 = (tmp3_fu_925_p2 + tmp2_fu_915_p2);

assign tmp2_fu_915_p0 = exp_table_q1;

assign tmp2_fu_915_p1 = exp_table_q0;

assign tmp2_fu_915_p2 = ($signed(tmp2_fu_915_p0) + $signed(tmp2_fu_915_p1));

assign tmp3_fu_925_p2 = ($signed(tmp4_fu_921_p2) + $signed(exp_res_0_V_reg_1188));

assign tmp4_fu_921_p2 = ($signed(exp_res_1_V_reg_1194) + $signed(exp_res_2_V_reg_1210));

assign tmp5_fu_949_p2 = (tmp7_fu_944_p2 + tmp6_fu_936_p2);

assign tmp6_fu_936_p2 = ($signed(exp_res_3_V_reg_1216) + $signed(exp_res_4_V_reg_1232));

assign tmp7_fu_944_p2 = ($signed(tmp8_fu_940_p2) + $signed(exp_res_5_V_reg_1238));

assign tmp8_fu_940_p2 = ($signed(exp_res_6_V_reg_1254) + $signed(exp_res_7_V_reg_1260));

assign tmp_1_fu_814_p1 = tmp_22_fu_806_p3;

assign tmp_21_fu_793_p3 = data_V_data_0_V_dout[32'd7];

assign tmp_22_fu_806_p3 = data_V_data_1_V_dout[32'd7];

assign tmp_2_fu_883_p1 = tmp_23_reg_1148;

assign tmp_3_fu_887_p1 = tmp_24_reg_1153;

assign tmp_4_fu_891_p1 = tmp_25_reg_1158;

assign tmp_5_fu_895_p1 = tmp_26_reg_1163;

assign tmp_6_fu_899_p1 = tmp_27_reg_1168;

assign tmp_7_fu_903_p1 = tmp_28_reg_1173;

assign tmp_8_fu_911_p1 = tmp_30_reg_1183;

assign tmp_9_fu_971_p1 = y_V_reg_1286;

assign tmp_fu_801_p1 = tmp_21_fu_793_p3;

assign tmp_s_fu_907_p1 = tmp_29_reg_1178;

endmodule //softmax_latency_array_array_softmax_config5_s
